import json

# custom_class_mapping.json 파일의 내용을 복사하여 문자열로 정의
# 실제 파일 경로에서 읽어오려면 이 부분을 수정하세요.
json_data_string = '''
{
    "19": 0,
    "24": 0,
    "4": 1,
    "15": 2,
    "14": 3,
    "45": 3,
    "56": 3,
    "21": 4,
    "22": 4,
    "35": 4,
    "36": 4,
    "37": 4,
    "38": 4,
    "39": 4,
    "40": 4,
    "41": 4,
    "42": 4,
    "43": 4,
    "44": 4,
    "46": 4,
    "47": 4,
    "48": 4,
    "49": 4,
    "50": 4,
    "51": 4,
    "52": 4,
    "53": 4,
    "54": 4,
    "55": 4,
    "57": 4,
    "58": 4,
    "16": 5,
    "17": 5,
    "18": 5,
    "23": 5,
    "13": 6,
    "60": 7,
    "62": 7,
    "63": 7,
    "89": 9,
    "107": 10,
    "108": 10,
    "109": 10,
    "113": 10,
    "114": 10,
    "33": 11,
    "110": 11,
    "32": 12,
    "105": 12,
    "34": 13,
    "30": 14,
    "31": 14,
    "77": 15,
    "74": 16,
    "69": 17,
    "0": 18,
    "1": 18,
    "2": 18,
    "3": 18,
    "8": 18,
    "9": 18,
    "10": 18,
    "20": 18,
    "25": 18,
    "26": 18,
    "28": 18,
    "29": 18,
    "59": 18,
    "66": 18,
    "68": 18,
    "70": 18,
    "71": 18,
    "72": 18,
    "73": 18,
    "75": 18,
    "76": 18,
    "104": 18,
    "106": 18,
    "111": 18,
    "112": 18,
    "115": 18,
    "116": 18,
    "117": 18,
    "118": 18,
    "119": 18,
    "120": 18,
    "121": 18,
    "122": 18,
    "123": 18,
    "61": 18,
    "64": 18,
    "65": 18,
    "78": 18,
    "79": 18,
    "80": 18,
    "81": 18,
    "82": 18,
    "83": 18,
    "84": 18,
    "90": 18,
    "91": 18,
    "92": 18,
    "93": 18,
    "94": 18,
    "95": 18,
    "96": 18,
    "97": 18,
    "98": 18,
    "99": 18,
    "100": 18,
    "101": 18,
    "102": 18,
    "103": 18,
    "67": 18,
    "85": 18,
    "86": 18,
    "88": 18,
    "27": 18,
    "12": 18,
    "5": 18,
    "6": 18,
    "7": 18,
    "11": 18,
    "87": 18
}
'''

# JSON 문자열을 파이썬 딕셔너리로 변환
try:
    # 파일에서 직접 읽어오도록 수정
    with open('applications/efficientvit_seg/custom_class_mapping.json', 'r') as f:
        mapping_data = json.load(f)
        
    # JSON 키를 정수형으로 변환하여 세트로 만듦
    mapped_ids = {int(k) for k in mapping_data.keys()}

    # Mapillary Vistas v2.0의 전체 ID 세트 (0부터 123까지)
    all_vistas_ids = set(range(124))

    # 매핑 파일에 누락된 ID 찾기
    missing_ids = sorted(list(all_vistas_ids - mapped_ids))

    if not missing_ids:
        print("✅ 확인 완료: 0부터 123까지의 모든 ID가 custom_class_mapping.json에 포함되어 있습니다.")
    else:
        print("❌ 확인 필요: 다음 ID들이 custom_class_mapping.json에 누락되었습니다.")
        print(missing_ids)

except FileNotFoundError:
    print("오류: 'applications/efficientvit_seg/custom_class_mapping.json' 파일을 찾을 수 없습니다.")
except json.JSONDecodeError:
    print("오류: JSON 데이터 형식이 올바르지 않습니다.")
except Exception as e:
    print(f"오류 발생: {e}")
