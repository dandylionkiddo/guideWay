# 실행 환경 설정
runtime:
  gpu: "0"
  workers: 4

# 데이터 프로바이더 설정 (train.py와 호환되도록 수정)
data_provider:
  task: seg
  dataset: mapillary
  data_dir: "D:/AIffel/EfficientViT/data/mapillary-vistas-dataset_public_v2.0" # 데이터셋 루트 경로
  n_classes: 19 # 모델 설정과 일치하는지 확인
  class_mapping_path: "applications/efficientvit_seg/custom_class_mapping.json"
  class_definitions_file: "applications/efficientvit_seg/custom_class_definitions.json"

  # SegDataProvider가 데이터셋 구조를 파악하는 데 사용하는 정보
  train_split: training # 평가 시 사용되지 않음
  val_split: validation   # 평가 시 사용할 데이터 분할
  image_dir_name: images
  label_dir_name: labels
  image_suffix: .jpg
  label_suffix: .png

  # 데이터로더 설정
  base_batch_size: 1 # 평가 시 사용되지 않음
  test_batch_size: 1    # 평가용 배치 사이즈
  n_worker: 4           # 평가용 워커 수
  image_size: [[512, 512]]

# 모델 설정 (기존 설정 유지)
model:
  name: "efficientvit-seg-b1"
  n_classes: 19
  weight_url: "D:/AIffel/EfficientViT/efficientvit/output/from_runpod/efficientvit-b1-final.pt"

# 평가 결과 저장 경로
save_path: "./output/eval_results"

# 저장 옵션
saving:
  # 순서대로 저장할 이미지 개수. 이 항목이 있으면 image_sample_ratio 대신 사용됩니다.
  save_n_images: 10
  # 저장할 이미지 비율 (0.0 ~ 1.0). 1.0 또는 항목이 없으면 모두 저장.
  image_sample_ratio: 0.0

# 평가 항목 설정 (원하는 항목만 남기거나 주석 처리)
evaluation_tasks:
  - calculate_fps
  - calculate_miou
  - save_images
